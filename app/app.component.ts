import {Component, OnInit} from "@angular/core";
//import {NS_ROUTER_DIRECTIVES} from "nativescript-angular/router";
import {BarcodeScanner}  from "nativescript-barcodescanner";
import { WebView, LoadEventData } from "tns-core-modules/ui/web-view";
import { isAndroid } from "tns-core-modules/platform"
import * as dialogs from "tns-core-modules/ui/dialogs";
//import * as clipboardModule from "nativescript-clipboard";

@Component({
    selector: "ns-app",
    // templateUrl: "app.component.html",
    template:`
    <ActionBar title="VEMEX">
        <ActionItem text="QR Code" (tap)="scanBarcode()" ios.position="left">        
        </ActionItem>
    </ActionBar>
    <GridLayout>
       <WebView #webview loaded="webViewLoaded"  touch="webViewTouch" pan="webViewPan" [src]="url"></WebView>
    </GridLayout>`,
    
    //template: "<page-router-outlet></page-router-outlet>",
    //directives: [NS_ROUTER_DIRECTIVES]
})
export class AppComponent implements OnInit {
    public url="https://vemex.net";
    // @ViewChild("webview") webview: WebView;


    permition:any;
    barcodescanner:BarcodeScanner = new BarcodeScanner();
    
    public constructor() {
         //this.barcodescanner = new BarcodeScanner();
        
    }

    webViewTouch(args){
        console.log("touch event");
    }
    
    webViewPan(args){
        console.log("pan gesture");
    }

    webViewLoaded(args){
        var webview:WebView = <WebView>args.object;
        if(isAndroid){
            webview.android.getSettings().setDisplayZoomControls(false);
        }
    }

    scanBarcode() {
        dialogs.confirm({
            message: "Now you will be prompted to scan a QR code.\n"+
            "This QR code should contain Bitcoin (BTC) or Fargocoin (FRGC) wallet address. Usually, such QR codes could be generated by applications that work with different cryptocurrencies. You can send BTC or FRGC cryptocurrencies by the address."
            ,
            okButtonText: "Scan",
            cancelButtonText: "Cancel",
        }).then((result)=> {

            // result argument is boolean
            console.log("Dialog result: " + result);
            if (result){
                this.requestPermission().then((result) => {
                    this.barcodescanner.scan({
                        cancelLabel: "Stop scanning",
                        message: "Go scan something",
                        preferFrontCamera: false,
                        showFlipCameraButton: true
                    }).then((result) => {
                        console.log("Scan format: " + result.format);
                        console.log("Scan text:   " + result.text);
                        // clipboardModule.setText(result.text).then(function() {
                        //     console.log(result.text + " copied to clipboard");
                        // });
                        dialogs.confirm({
                            message: "The wallet address was scanned successfully!\n"+
                            "It was copied to the system clipboard. Please, paste the wallet address into the “Recipient address” field of the “Withdraw” dialog box to specify by what address you want to send your cryptocurrency."
                            , 
                            okButtonText: "Ok",
                        });
                    }, (error) => {
                        console.log("No scan: " + error);
                    });
                }, (error) => {
                    console.log("ERROR", error);
                });
            }
        });
    }

    requestPermission() {
        return new Promise((resolve, reject) => {
            this.barcodescanner.available().then((available) => {
                if(available) {
                    this.barcodescanner.hasCameraPermission().then((granted) => {
                        if(!granted) {
                            this.barcodescanner.requestCameraPermission().then(() => {
                                resolve("Camera permission granted");
                            });
                        } else {
                            resolve("Camera permission was already granted");
                        }
                    });
                } else {
                    reject("This device does not have an available camera");
                }
            });
        });
    }
    public ngOnInit() {
        // this.webview.on(WebView.loadFinishedEvent, function (args: LoadEventData) {
        //     console.log("loadFinishedEvent called");
        this.permition = this.requestPermission();
       
    }

}